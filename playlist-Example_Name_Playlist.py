import yt_dlp
import time
import os
import subprocess
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PLAYLIST_URL = "https://www.youtube.com/playlist?list=<Your_Playlist_YouTube>"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç
SAVE_PATH = "/path/to/save/local/playlist"  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
AUDIO_QUALITY = "192"  # 128, 192, 320 (kbps)
DELAY_BETWEEN_DOWNLOADS = 5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–µ–∫–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
SKIP_EXISTING = True  # –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
LOG_FILE = "logs/playlist-<Your_Playlist_YouTube>.log"  # –§–∞–π–ª –ª–æ–≥–æ–≤ –ø–ª–µ–π–ª–∏—Å—Ç–∞ - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞

def check_ffmpeg():
    try:
        subprocess.run(["ffmpeg", "-version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
        return True
    except:
        return False

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
def log(message):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] {message}\n")
    print(message)

if not check_ffmpeg():
    log("‚ùå FFmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –°–∫–∞—á–∞—Ç—å: https://ffmpeg.org/")
    exit(1)

def download_playlist(url):
    try:
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ
        ydl_info = yt_dlp.YoutubeDL({
            'ignoreerrors': True,
            'extract_flat': True,
            'socket_timeout': 30,
            'source_address': '0.0.0.0',
            'quiet': True
        })

        info = ydl_info.extract_info(url, download=False)

        if not info or 'entries' not in info:
            log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞")
            return

        playlist_title = info.get('title', 'unknown_playlist').replace('/', '_')
        playlist_dir = os.path.join(SAVE_PATH, playlist_title)
        os.makedirs(playlist_dir, exist_ok=True)

        log(f"üéµ –ü–ª–µ–π–ª–∏—Å—Ç: {playlist_title} ({len(info['entries'])} —Ç—Ä–µ–∫–æ–≤)")
        log(f"üìÅ –ü–∞–ø–∫–∞: {playlist_dir}")

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
        ydl_opts = {
            'format': 'bestaudio/best',
            'outtmpl': f'{playlist_dir}/%(title)s.%(ext)s',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': AUDIO_QUALITY,
            }],
            'ignoreerrors': True,
            'quiet': True,
            'retries': 3,
            'fragment_retries': 3,
            'socket_timeout': 30,
            'source_address': '0.0.0.0',
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –∏ —Ç–æ–∫–µ–Ω—ã
            'extractor_args': {
                'youtube': {
                    'skip': ['dash', 'hls']
                }
            },
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            'format_sort': ['ext:mp3:m4a', 'vcodec:none'],
            'allow_multiple_video_streams': True,
            'allow_multiple_audio_streams': True,
            # User-Agent
            'http_headers': {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36',
                'Accept-Language': 'en-US,en;q=0.9',
                'Referer': 'https://www.youtube.com/',
                'Origin': 'https://www.youtube.com',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'DNT': '1',
            }
        }

        downloaded = 0
        skipped = 0
        failed = 0

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            for i, entry in enumerate(info['entries'], 1):
                if not entry:
                    failed += 1
                    log(f"‚ùå [{i}/{len(info['entries'])}] –ü—É—Å—Ç–∞—è –∑–∞–ø–∏—Å—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ")
                    continue

                video_id = entry.get('id')
                video_url = f"https://youtu.be/{video_id}" if video_id else entry.get('url')
                video_title = entry.get('title', f'–¢—Ä–µ–∫ {i}').replace('/', '_')
                output_file = f"{playlist_dir}/{video_title}.mp3"

                if SKIP_EXISTING and os.path.exists(output_file):
                    log(f"‚è© [{i}/{len(info['entries'])}] –ü—Ä–æ–ø—É—â–µ–Ω: {video_title} (—É–∂–µ –µ—Å—Ç—å)")
                    skipped += 1
                    continue

                try:
                    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                    try:
                        ydl.download([video_url])
                        if os.path.exists(output_file):
                            log(f"‚úÖ [{i}/{len(info['entries'])}] –ó–∞–≥—Ä—É–∂–µ–Ω: {video_title} (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)")
                            downloaded += 1
                            continue
                    except Exception as e:
                        log(f"‚ö†Ô∏è [{i}/{len(info['entries'])}] –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥: {str(e)}")

                    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL
                    try:
                        ydl.download([f"https://www.youtube.com/watch?v={video_id}"])
                        if os.path.exists(output_file):
                            log(f"‚úÖ [{i}/{len(info['entries'])}] –ó–∞–≥—Ä—É–∂–µ–Ω: {video_title} (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL)")
                            downloaded += 1
                            continue
                    except Exception as e:
                        log(f"‚ö†Ô∏è [{i}/{len(info['entries'])}] –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL: {str(e)}")

                    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: Embed-—Å—Ç—Ä–∞–Ω–∏—Ü–∞
                    try:
                        ydl.download([f"https://www.youtube.com/embed/{video_id}"])
                        if os.path.exists(output_file):
                            log(f"‚úÖ [{i}/{len(info['entries'])}] –ó–∞–≥—Ä—É–∂–µ–Ω: {video_title} (embed URL)")
                            downloaded += 1
                            continue
                    except Exception as e:
                        log(f"‚ö†Ô∏è [{i}/{len(info['entries'])}] Embed –º–µ—Ç–æ–¥: {str(e)}")

                    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
                    log(f"‚ùå [{i}/{len(info['entries'])}] –û—à–∏–±–∫–∞: {video_title} (–≤—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏)")
                    failed += 1

                except Exception as e:
                    log(f"‚ùå [{i}/{len(info['entries'])}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {video_title} ({str(e)})")
                    failed += 1

                time.sleep(DELAY_BETWEEN_DOWNLOADS)

        log(f"\n–ò—Ç–æ–≥: –ó–∞–≥—Ä—É–∂–µ–Ω–æ - {downloaded}, –ü—Ä–æ–ø—É—â–µ–Ω–æ - {skipped}, –û—à–∏–±–æ–∫ - {failed}")

    except Exception as e:
        log(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    log("="*30)
    log("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞")
    download_playlist(PLAYLIST_URL)
    log("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É\n")
