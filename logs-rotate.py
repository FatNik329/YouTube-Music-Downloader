import os
import glob
import gzip
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
LOG_DIR = "logs"  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ª–æ–≥–∞–º–∏
MAX_DIR_SIZE_MB = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏ —Å –ª–æ–≥–∞–º–∏ (–ú–ë)
MAX_LOG_VERSIONS = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –ª–æ–≥–æ–≤

def get_dir_size(path):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö"""
    total = 0
    for entry in os.scandir(path):
        if entry.is_file():
            total += entry.stat().st_size
    return total / (1024 * 1024)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–ë

def rotate_logs():
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤...")
    current_size = get_dir_size(LOG_DIR)
    print(f"üìä –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏: {current_size:.2f} MB")

    # 1. –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –ª–æ–≥–∏ (–∫—Ä–æ–º–µ —É–∂–µ —Å–∂–∞—Ç—ã—Ö)
    archived_count = 0
    current_logs = sorted(
        [f for f in glob.glob(os.path.join(LOG_DIR, "*.log")) if not f.endswith('.gz')],
        key=os.path.getmtime
    )

    for log_file in current_logs:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –µ—â—ë –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å (–ø–æ —Ä–∞–∑–º–µ—Ä—É)
            if get_dir_size(LOG_DIR) < MAX_DIR_SIZE_MB:
                break

            # –°–æ–∑–¥–∞—ë–º –∏–º—è –¥–ª—è –∞—Ä—Ö–∏–≤–∞
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            archive_name = f"{log_file}.{timestamp}.gz"

            # –°–∂–∏–º–∞–µ–º –ª–æ–≥
            with open(log_file, 'rb') as f_in:
                with gzip.open(archive_name, 'wb') as f_out:
                    f_out.writelines(f_in)

            # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            os.remove(log_file)
            print(f"üì¶ –ó–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω: {os.path.basename(log_file)} -> {os.path.basename(archive_name)}")
            archived_count += 1
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ {log_file}: {str(e)}")

    # 2. –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ MAX_LOG_VERSIONS)
    all_archives = sorted(
        glob.glob(os.path.join(LOG_DIR, "*.log.*.gz")),
        key=os.path.getmtime,
        reverse=True
    )

    deleted_count = 0
    for old_archive in all_archives[MAX_LOG_VERSIONS:]:
        try:
            os.remove(old_archive)
            print(f"üßπ –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –∞—Ä—Ö–∏–≤: {os.path.basename(old_archive)}")
            deleted_count += 1
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {old_archive}: {str(e)}")

    print(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ. –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∞—Ä—Ö–∏–≤–æ–≤, –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {archived_count} –ª–æ–≥–æ–≤")
    print(f"üìä –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏: {get_dir_size(LOG_DIR):.2f} MB")

if __name__ == "__main__":
    if not os.path.exists(LOG_DIR):
        print(f"‚ùå –ü–∞–ø–∫–∞ —Å –ª–æ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {LOG_DIR}")
        exit(1)

    rotate_logs()
